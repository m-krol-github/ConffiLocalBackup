//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Conffi.Input
{
    public partial class @UserInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UserInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""a54ae5b2-c208-4f5d-9a17-a513c18ea992"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""dfe827d2-a097-4d76-a018-b5ac936c7a8d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""a71d9398-d8ad-4fc1-86aa-abb4c8b7ba30"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""2e90afba-a724-4381-ab47-32c7900c6826"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""Button"",
                    ""id"": ""571d7ecf-be04-4191-af82-1b7a3bd4e5f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouchDelta"",
                    ""type"": ""Value"",
                    ""id"": ""7801af35-36ee-4ba1-b393-ff2c52f45b77"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81612751-e9f9-49d6-85d5-11f92ecd379d"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df835928-90ab-4a2f-8a0c-0477f47efe3c"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a2d1ddb-70a5-4ba9-90a1-90aa93f157a4"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3889433-4b10-43de-b8cd-774229cd502b"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2ed44c1-716b-42fa-bc9a-4abddc795d75"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""8ad34fb7-ff11-4b05-b829-3c9a22aa1ca4"",
            ""actions"": [
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""59490d97-8cac-428b-95a8-f33010eb58e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""70e0699c-73b3-4d56-82e8-3f4ab41677ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""609d0325-a6b8-4563-9b5c-aba831bee995"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePositionDelta"",
                    ""type"": ""Value"",
                    ""id"": ""e550398c-cd55-4775-a5cc-369cca0cf999"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""2a61a656-783d-482d-9feb-9aa9cae42791"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""886545fb-b54e-404d-8104-d372d031f838"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53996fcd-0335-4357-989e-c907468fdcb7"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1df6d3c-21c7-4e94-8aac-9ee763af0bd2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5206c48-d456-4525-81bc-8efc9c4b634f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a01307b5-730e-49a4-96ac-afe3d1fab50c"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c7d2959-8a89-4557-b6e6-8b2c5e5d54a6"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePositionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a19f984-f669-4197-aa2e-02daf1b019eb"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""22915360-4dca-4975-acb3-2aa99c595f4c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5e13f036-5109-4396-be05-da805bb50ec9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""c4bc3448-1706-47ef-aa47-f9ea622726ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""8226f27e-141b-46fd-902e-803b54e8ad50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""a122f5f6-d816-4995-a332-1fb96071dcfc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""236eb472-d834-4fa5-aabb-4e98fd3f650a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Speed"",
                    ""type"": ""Button"",
                    ""id"": ""4ea81e73-6ed0-4e74-b854-0a415ec0ecf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""6fe2ade9-850b-423d-be9a-abb35a5880be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9cdd98e4-fe91-4ed1-a7b8-f786df1a8797"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3516b86c-c4aa-404e-9faa-9d04d3668102"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d1f98f25-9427-4f77-9b7a-22712a4be247"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""890a3a4f-c2d0-4886-b6ae-9e4b006981a6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""64263a1f-b12c-49f3-afa2-1ea46918cdab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""839f8764-9830-4413-b67f-fd9f899c44a5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16757ded-97ea-4a4b-ab0a-7f77e435fff3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a9f7110-1830-47b2-9503-be444c2a833d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23284cee-c1e5-4869-b74b-d0520d470315"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58350b66-4932-4c34-b4ed-e50b2f42eb0e"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b695873-df5a-4b8a-b141-576dfcde26c8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": []
        }
    ]
}");
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_PrimaryTouchPosition = m_Touch.FindAction("PrimaryTouchPosition", throwIfNotFound: true);
            m_Touch_SecondaryTouchPosition = m_Touch.FindAction("SecondaryTouchPosition", throwIfNotFound: true);
            m_Touch_SecondaryTouchContact = m_Touch.FindAction("SecondaryTouchContact", throwIfNotFound: true);
            m_Touch_PrimaryContact = m_Touch.FindAction("PrimaryContact", throwIfNotFound: true);
            m_Touch_PrimaryTouchDelta = m_Touch.FindAction("PrimaryTouchDelta", throwIfNotFound: true);
            // Mouse
            m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
            m_Mouse_PrimaryButton = m_Mouse.FindAction("PrimaryButton", throwIfNotFound: true);
            m_Mouse_SecondaryButton = m_Mouse.FindAction("SecondaryButton", throwIfNotFound: true);
            m_Mouse_MousePosition = m_Mouse.FindAction("MousePosition", throwIfNotFound: true);
            m_Mouse_MousePositionDelta = m_Mouse.FindAction("MousePositionDelta", throwIfNotFound: true);
            m_Mouse_Scroll = m_Mouse.FindAction("Scroll", throwIfNotFound: true);
            // Keyboard
            m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
            m_Keyboard_Move = m_Keyboard.FindAction("Move", throwIfNotFound: true);
            m_Keyboard_Left = m_Keyboard.FindAction("Left", throwIfNotFound: true);
            m_Keyboard_Right = m_Keyboard.FindAction("Right", throwIfNotFound: true);
            m_Keyboard_Up = m_Keyboard.FindAction("Up", throwIfNotFound: true);
            m_Keyboard_Down = m_Keyboard.FindAction("Down", throwIfNotFound: true);
            m_Keyboard_Speed = m_Keyboard.FindAction("Speed", throwIfNotFound: true);
            m_Keyboard_Action = m_Keyboard.FindAction("Action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Touch
        private readonly InputActionMap m_Touch;
        private ITouchActions m_TouchActionsCallbackInterface;
        private readonly InputAction m_Touch_PrimaryTouchPosition;
        private readonly InputAction m_Touch_SecondaryTouchPosition;
        private readonly InputAction m_Touch_SecondaryTouchContact;
        private readonly InputAction m_Touch_PrimaryContact;
        private readonly InputAction m_Touch_PrimaryTouchDelta;
        public struct TouchActions
        {
            private @UserInput m_Wrapper;
            public TouchActions(@UserInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryTouchPosition => m_Wrapper.m_Touch_PrimaryTouchPosition;
            public InputAction @SecondaryTouchPosition => m_Wrapper.m_Touch_SecondaryTouchPosition;
            public InputAction @SecondaryTouchContact => m_Wrapper.m_Touch_SecondaryTouchContact;
            public InputAction @PrimaryContact => m_Wrapper.m_Touch_PrimaryContact;
            public InputAction @PrimaryTouchDelta => m_Wrapper.m_Touch_PrimaryTouchDelta;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void SetCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterface != null)
                {
                    @PrimaryTouchPosition.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPosition;
                    @PrimaryTouchPosition.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPosition;
                    @PrimaryTouchPosition.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPosition;
                    @SecondaryTouchPosition.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchPosition;
                    @SecondaryTouchPosition.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchPosition;
                    @SecondaryTouchPosition.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchPosition;
                    @SecondaryTouchContact.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchContact;
                    @SecondaryTouchContact.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchContact;
                    @SecondaryTouchContact.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondaryTouchContact;
                    @PrimaryContact.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryContact;
                    @PrimaryContact.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryContact;
                    @PrimaryContact.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryContact;
                    @PrimaryTouchDelta.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchDelta;
                    @PrimaryTouchDelta.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchDelta;
                    @PrimaryTouchDelta.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchDelta;
                }
                m_Wrapper.m_TouchActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PrimaryTouchPosition.started += instance.OnPrimaryTouchPosition;
                    @PrimaryTouchPosition.performed += instance.OnPrimaryTouchPosition;
                    @PrimaryTouchPosition.canceled += instance.OnPrimaryTouchPosition;
                    @SecondaryTouchPosition.started += instance.OnSecondaryTouchPosition;
                    @SecondaryTouchPosition.performed += instance.OnSecondaryTouchPosition;
                    @SecondaryTouchPosition.canceled += instance.OnSecondaryTouchPosition;
                    @SecondaryTouchContact.started += instance.OnSecondaryTouchContact;
                    @SecondaryTouchContact.performed += instance.OnSecondaryTouchContact;
                    @SecondaryTouchContact.canceled += instance.OnSecondaryTouchContact;
                    @PrimaryContact.started += instance.OnPrimaryContact;
                    @PrimaryContact.performed += instance.OnPrimaryContact;
                    @PrimaryContact.canceled += instance.OnPrimaryContact;
                    @PrimaryTouchDelta.started += instance.OnPrimaryTouchDelta;
                    @PrimaryTouchDelta.performed += instance.OnPrimaryTouchDelta;
                    @PrimaryTouchDelta.canceled += instance.OnPrimaryTouchDelta;
                }
            }
        }
        public TouchActions @Touch => new TouchActions(this);

        // Mouse
        private readonly InputActionMap m_Mouse;
        private IMouseActions m_MouseActionsCallbackInterface;
        private readonly InputAction m_Mouse_PrimaryButton;
        private readonly InputAction m_Mouse_SecondaryButton;
        private readonly InputAction m_Mouse_MousePosition;
        private readonly InputAction m_Mouse_MousePositionDelta;
        private readonly InputAction m_Mouse_Scroll;
        public struct MouseActions
        {
            private @UserInput m_Wrapper;
            public MouseActions(@UserInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryButton => m_Wrapper.m_Mouse_PrimaryButton;
            public InputAction @SecondaryButton => m_Wrapper.m_Mouse_SecondaryButton;
            public InputAction @MousePosition => m_Wrapper.m_Mouse_MousePosition;
            public InputAction @MousePositionDelta => m_Wrapper.m_Mouse_MousePositionDelta;
            public InputAction @Scroll => m_Wrapper.m_Mouse_Scroll;
            public InputActionMap Get() { return m_Wrapper.m_Mouse; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
            public void SetCallbacks(IMouseActions instance)
            {
                if (m_Wrapper.m_MouseActionsCallbackInterface != null)
                {
                    @PrimaryButton.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnPrimaryButton;
                    @PrimaryButton.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnPrimaryButton;
                    @PrimaryButton.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnPrimaryButton;
                    @SecondaryButton.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnSecondaryButton;
                    @SecondaryButton.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnSecondaryButton;
                    @SecondaryButton.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnSecondaryButton;
                    @MousePosition.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                    @MousePosition.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                    @MousePosition.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                    @MousePositionDelta.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePositionDelta;
                    @MousePositionDelta.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePositionDelta;
                    @MousePositionDelta.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePositionDelta;
                    @Scroll.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnScroll;
                    @Scroll.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnScroll;
                    @Scroll.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnScroll;
                }
                m_Wrapper.m_MouseActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PrimaryButton.started += instance.OnPrimaryButton;
                    @PrimaryButton.performed += instance.OnPrimaryButton;
                    @PrimaryButton.canceled += instance.OnPrimaryButton;
                    @SecondaryButton.started += instance.OnSecondaryButton;
                    @SecondaryButton.performed += instance.OnSecondaryButton;
                    @SecondaryButton.canceled += instance.OnSecondaryButton;
                    @MousePosition.started += instance.OnMousePosition;
                    @MousePosition.performed += instance.OnMousePosition;
                    @MousePosition.canceled += instance.OnMousePosition;
                    @MousePositionDelta.started += instance.OnMousePositionDelta;
                    @MousePositionDelta.performed += instance.OnMousePositionDelta;
                    @MousePositionDelta.canceled += instance.OnMousePositionDelta;
                    @Scroll.started += instance.OnScroll;
                    @Scroll.performed += instance.OnScroll;
                    @Scroll.canceled += instance.OnScroll;
                }
            }
        }
        public MouseActions @Mouse => new MouseActions(this);

        // Keyboard
        private readonly InputActionMap m_Keyboard;
        private IKeyboardActions m_KeyboardActionsCallbackInterface;
        private readonly InputAction m_Keyboard_Move;
        private readonly InputAction m_Keyboard_Left;
        private readonly InputAction m_Keyboard_Right;
        private readonly InputAction m_Keyboard_Up;
        private readonly InputAction m_Keyboard_Down;
        private readonly InputAction m_Keyboard_Speed;
        private readonly InputAction m_Keyboard_Action;
        public struct KeyboardActions
        {
            private @UserInput m_Wrapper;
            public KeyboardActions(@UserInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Keyboard_Move;
            public InputAction @Left => m_Wrapper.m_Keyboard_Left;
            public InputAction @Right => m_Wrapper.m_Keyboard_Right;
            public InputAction @Up => m_Wrapper.m_Keyboard_Up;
            public InputAction @Down => m_Wrapper.m_Keyboard_Down;
            public InputAction @Speed => m_Wrapper.m_Keyboard_Speed;
            public InputAction @Action => m_Wrapper.m_Keyboard_Action;
            public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
            public void SetCallbacks(IKeyboardActions instance)
            {
                if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMove;
                    @Left.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnLeft;
                    @Left.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnLeft;
                    @Left.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnLeft;
                    @Right.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRight;
                    @Right.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRight;
                    @Right.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRight;
                    @Up.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnUp;
                    @Up.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnUp;
                    @Up.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnUp;
                    @Down.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnDown;
                    @Down.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnDown;
                    @Down.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnDown;
                    @Speed.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpeed;
                    @Speed.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpeed;
                    @Speed.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpeed;
                    @Action.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnAction;
                    @Action.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnAction;
                    @Action.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnAction;
                }
                m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Left.started += instance.OnLeft;
                    @Left.performed += instance.OnLeft;
                    @Left.canceled += instance.OnLeft;
                    @Right.started += instance.OnRight;
                    @Right.performed += instance.OnRight;
                    @Right.canceled += instance.OnRight;
                    @Up.started += instance.OnUp;
                    @Up.performed += instance.OnUp;
                    @Up.canceled += instance.OnUp;
                    @Down.started += instance.OnDown;
                    @Down.performed += instance.OnDown;
                    @Down.canceled += instance.OnDown;
                    @Speed.started += instance.OnSpeed;
                    @Speed.performed += instance.OnSpeed;
                    @Speed.canceled += instance.OnSpeed;
                    @Action.started += instance.OnAction;
                    @Action.performed += instance.OnAction;
                    @Action.canceled += instance.OnAction;
                }
            }
        }
        public KeyboardActions @Keyboard => new KeyboardActions(this);
        private int m_TouchSchemeIndex = -1;
        public InputControlScheme TouchScheme
        {
            get
            {
                if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
                return asset.controlSchemes[m_TouchSchemeIndex];
            }
        }
        public interface ITouchActions
        {
            void OnPrimaryTouchPosition(InputAction.CallbackContext context);
            void OnSecondaryTouchPosition(InputAction.CallbackContext context);
            void OnSecondaryTouchContact(InputAction.CallbackContext context);
            void OnPrimaryContact(InputAction.CallbackContext context);
            void OnPrimaryTouchDelta(InputAction.CallbackContext context);
        }
        public interface IMouseActions
        {
            void OnPrimaryButton(InputAction.CallbackContext context);
            void OnSecondaryButton(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
            void OnMousePositionDelta(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
        }
        public interface IKeyboardActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnLeft(InputAction.CallbackContext context);
            void OnRight(InputAction.CallbackContext context);
            void OnUp(InputAction.CallbackContext context);
            void OnDown(InputAction.CallbackContext context);
            void OnSpeed(InputAction.CallbackContext context);
            void OnAction(InputAction.CallbackContext context);
        }
    }
}
